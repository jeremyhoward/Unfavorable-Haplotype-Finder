#ifndef HAPLOFINDERCLASSES_H_
#define HAPLOFINDERCLASSES_H_

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
// Class to store index start and stop site for each chromosome //
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
class CHR_Index
{
private:
    int Chromosome;             /* Chromsome */
    int StartIndex;             /* Start Index */
    int EndIndex;               /* End Index */
    int Num_SNP;
public:
    CHR_Index();
    CHR_Index(int chr = 0, int stind = 0, int enind = 0, int numsnp = 0);
    ~CHR_Index();
    int getChr(){return Chromosome;}
    int getStInd(){return StartIndex;}
    int getEnInd(){return EndIndex;}
    int getNumSnp(){return Num_SNP;}
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//         Class to store regions that passed Stage 1-2         //
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
class Unfavorable_Regions
{
private:
    int Chromosome_R;               /* Chromosome it is in */
    int StartPos_R;                 /* Start Position in base pairs */
    int EndPos_R;                   /* End Position in base pairs */
    int StartIndex_R;               /* Index it starts easier to grab later */
    int EndIndex_R;                 /* Index in ends easier to grab later */
    std::string Haplotype_R;        /* Unfavorable Haplotype */
    double Raw_Phenotype;           /* Uncorrected Phenotype */
    double effect;                  /* actual effect from model */
    double LS_Mean;                 /* Corrected Phenotype */
    double t_value;                 /* T-Statistisc */
public:
    Unfavorable_Regions();
    Unfavorable_Regions(int chr = 0, int st_pos = 0,int en_pos = 0, int st_ind = 0, int en_ind = 0, std::string hap = "", double pheno = 0.0, double eff = 0.0, double lsm = 0.0, double tval = 0.0);
    ~Unfavorable_Regions();
    int getChr_R(){return Chromosome_R;}
    int getStPos_R(){return StartPos_R;}
    int getEnPos_R(){return EndPos_R;}
    int getStartIndex_R(){return StartIndex_R;}
    int getEndIndex_R(){return EndIndex_R;}
    std::string getHaplotype_R(){return Haplotype_R;}
    double getRawPheno_R(){return Raw_Phenotype;}
    double getEffect(){return effect;}
    double getLSM_R(){return LS_Mean;}
    double gettval(){return t_value;}
    void Update_Haplotype(std::string temp);
    void Update_RawPheno(double temp);
    void Update_Effect(double temp);
    void Update_LSM(double temp);
    void Update_Tstat(double temp);
    friend bool sortByStart(const Unfavorable_Regions&, const Unfavorable_Regions&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//         Class to store regions within each chromosome        //
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
class Unfavorable_Regions_sub
{
private:
    int StartIndex_s;               /* start of haplotype */
    int EndIndex_s;                 /* end of haplotype */
    std::string Haplotype_s;        /* haplotype that is the worst */
    int Number_s;                   /* number of animals that have the worst haplotype */
    double Phenotype_s;             /* Mean phenotype of worst haplotype */
    std::string Animal_ID_s;        /* string of animals IDs; */
public:
    Unfavorable_Regions_sub();
    Unfavorable_Regions_sub(int st = 0, int end = 0, std::string hap_s = "", int num = 0, double pheno_s = 0.0, std::string animal_s = "");
    ~Unfavorable_Regions_sub();
    int getStartIndex_s(){return StartIndex_s;}
    int getEndIndex_s(){return EndIndex_s;}
    std::string getHaplotype_s(){return Haplotype_s;}
    int getNumber_s(){return Number_s;}
    double getPhenotype_s(){return Phenotype_s;}
    std::string getAnimal_ID_s(){return Animal_ID_s;}
    /* can do in parallel put first need to initialize things and then update */
    void Update_substart(int temp);
    void Update_subend(int temp);
    void Update_subHaplotype(std::string temp);
    void Update_subNumber(int temp);
    void Update_subPhenotype(double temp);
    void Update_subAnimal_IDs(std::string temp);
    // Sort Phenotype function
    friend bool sortByPheno(const Unfavorable_Regions_sub&, const Unfavorable_Regions_sub&);
};

#endif
